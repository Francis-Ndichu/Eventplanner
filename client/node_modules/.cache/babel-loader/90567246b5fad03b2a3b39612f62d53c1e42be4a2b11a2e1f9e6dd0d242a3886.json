{"ast":null,"code":"var _jsxFileName = \"/home/francis/EventPlanner/client/src/Components/TaskList.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList({\n  onDrop\n}) {\n  _s();\n  const {\n    tasks,\n    setTasks\n  } = useContext(TaskContext);\n  const {\n    user\n  } = useAuth();\n  const handleDrop = e => {\n    e.preventDefault();\n    try {\n      const droppedTaskData = e.dataTransfer.getData('task');\n      if (!droppedTaskData) {\n        // Handle empty data\n        console.error(\"Error: Empty dropped task data.\");\n        return;\n      }\n      const droppedTask = JSON.parse(droppedTaskData);\n      // Proceed with handling the dropped task\n      onDrop(droppedTask);\n    } catch (error) {\n      console.error(\"Error parsing dropped task data:\", error);\n    }\n  };\n  const allowDrop = e => {\n    e.preventDefault();\n  };\n  const moveTask = (dragIndex, hoverIndex, sourceSection, targetSection) => {\n    // Create a copy of the tasks arrays for source and target sections\n    const updatedSourceTasks = [...tasks[sourceSection]];\n    const updatedTargetTasks = [...tasks[targetSection]];\n\n    // Get the dragged task\n    const draggedTask = updatedSourceTasks[dragIndex];\n\n    // Remove the task from the source section\n    updatedSourceTasks.splice(dragIndex, 1);\n\n    // Insert the task into the target section at the hover index\n    updatedTargetTasks.splice(hoverIndex, 0, draggedTask);\n\n    // Update the tasks arrays in state\n    setTasks({\n      ...tasks,\n      [sourceSection]: updatedSourceTasks,\n      [targetSection]: updatedTargetTasks\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onDrop: handleDrop,\n    onDragOver: allowDrop,\n    children: Object.entries(tasks).map(([section, sectionTasks]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: section\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), sectionTasks.map((task, index) => /*#__PURE__*/_jsxDEV(Task, {\n        index: index,\n        task: task,\n        moveTask: (dragIndex, hoverIndex) => moveTask(dragIndex, hoverIndex, section, section),\n        isAdmin: user.role === 'admin'\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }, this))]\n    }, section, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 7\n  }, this);\n}\n_s(TaskList, \"XeI+cjhc9Jdm/ZzRXAUQKX3Vmg4=\", true);\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["TaskList","onDrop","_s","tasks","setTasks","useContext","TaskContext","user","useAuth","handleDrop","e","preventDefault","droppedTaskData","dataTransfer","getData","console","error","droppedTask","JSON","parse","allowDrop","moveTask","dragIndex","hoverIndex","sourceSection","targetSection","updatedSourceTasks","updatedTargetTasks","draggedTask","splice","_jsxDEV","onDragOver","children","Object","entries","map","section","sectionTasks","fileName","_jsxFileName","lineNumber","columnNumber","task","index","Task","isAdmin","role","id","_c","$RefreshReg$"],"sources":["/home/francis/EventPlanner/client/src/Components/TaskList.js"],"sourcesContent":["function TaskList({ onDrop }) {\n    const { tasks, setTasks } = useContext(TaskContext);\n    const { user } = useAuth();\n  \n    const handleDrop = (e) => {\n      e.preventDefault();\n      \n      try {\n        const droppedTaskData = e.dataTransfer.getData('task');\n        if (!droppedTaskData) {\n          // Handle empty data\n          console.error(\"Error: Empty dropped task data.\");\n          return;\n        }\n    \n        const droppedTask = JSON.parse(droppedTaskData);\n        // Proceed with handling the dropped task\n        onDrop(droppedTask);\n      } catch (error) {\n        console.error(\"Error parsing dropped task data:\", error);\n      }\n    };\n  \n    const allowDrop = (e) => {\n      e.preventDefault();\n    };\n  \n    const moveTask = (dragIndex, hoverIndex, sourceSection, targetSection) => {\n      // Create a copy of the tasks arrays for source and target sections\n      const updatedSourceTasks = [...tasks[sourceSection]];\n      const updatedTargetTasks = [...tasks[targetSection]];\n    \n      // Get the dragged task\n      const draggedTask = updatedSourceTasks[dragIndex];\n    \n      // Remove the task from the source section\n      updatedSourceTasks.splice(dragIndex, 1);\n    \n      // Insert the task into the target section at the hover index\n      updatedTargetTasks.splice(hoverIndex, 0, draggedTask);\n    \n      // Update the tasks arrays in state\n      setTasks({\n        ...tasks,\n        [sourceSection]: updatedSourceTasks,\n        [targetSection]: updatedTargetTasks\n      });\n    };\n  \n    return (\n      <div onDrop={handleDrop} onDragOver={allowDrop}>\n        {Object.entries(tasks).map(([section, sectionTasks]) => (\n          <div key={section}>\n            <h2>{section}</h2>\n            {sectionTasks.map((task, index) => (\n              <Task\n                key={task.id}\n                index={index}\n                task={task}\n                moveTask={(dragIndex, hoverIndex) => moveTask(dragIndex, hoverIndex, section, section)}\n                isAdmin={user.role === 'admin'}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n  \nexport default TaskList;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}