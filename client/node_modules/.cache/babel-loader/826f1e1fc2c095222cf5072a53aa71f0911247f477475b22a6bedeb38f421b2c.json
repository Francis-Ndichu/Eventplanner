{"ast":null,"code":"var _jsxFileName = \"/home/francis/EventPlanner/client/src/Components/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport Task from './Task';\nimport TaskContext from './TaskContext'; // Import TaskContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList({\n  onDrop\n}) {\n  _s();\n  // Remove the local state for tasks\n  // const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks from context instead of local state\n  const {\n    tasks,\n    updateTaskList\n  } = useContext(TaskContext);\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5555/api/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data = await response.json();\n      // setTasks(data); // No longer needed\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n  const handleDrop = (index, task) => {\n    // Implement the logic for handling drop event here\n    // For example:\n    // Remove the task from its current position\n    const updatedTasks = tasks.filter((_, i) => i !== index);\n\n    // Determine the new position for the dropped task\n    const newIndex = index; // Adjust this based on your requirements\n\n    // Insert the dropped task at the new position\n    updatedTasks.splice(newIndex, 0, task);\n\n    // Update the task list with the new order\n    updateTaskList(updatedTasks);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Task, {\n      index: index,\n      task: task,\n      onDrop: handleDrop\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"SfKYdYQkk5APiVH65WAfJZhmHWE=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","useContext","Task","TaskContext","jsxDEV","_jsxDEV","TaskList","onDrop","_s","tasks","updateTaskList","fetchTasks","response","fetch","ok","Error","data","json","error","console","handleDrop","index","task","updatedTasks","filter","_","i","newIndex","splice","children","map","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/francis/EventPlanner/client/src/Components/TaskList.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport Task from './Task';\nimport TaskContext from './TaskContext'; // Import TaskContext\n\nfunction TaskList({ onDrop }) {\n  // Remove the local state for tasks\n  // const [tasks, setTasks] = useState([]);\n\n  // Fetch tasks from context instead of local state\n  const { tasks, updateTaskList } = useContext(TaskContext);\n\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch('http://localhost:5555/api/tasks');\n      if (!response.ok) {\n        throw new Error('Failed to fetch tasks');\n      }\n      const data = await response.json();\n      // setTasks(data); // No longer needed\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  const handleDrop = (index, task) => {\n    // Implement the logic for handling drop event here\n    // For example:\n    // Remove the task from its current position\n    const updatedTasks = tasks.filter((_, i) => i !== index);\n\n    // Determine the new position for the dropped task\n    const newIndex = index; // Adjust this based on your requirements\n\n    // Insert the dropped task at the new position\n    updatedTasks.splice(newIndex, 0, task);\n\n    // Update the task list with the new order\n    updateTaskList(updatedTasks);\n  };\n\n  return (\n    <div>\n      {tasks.map((task, index) => (\n        <Task key={task.id} index={index} task={task} onDrop={handleDrop} />\n      ))}\n    </div>\n  );\n}\n\nexport default TaskList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC9D,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,QAAQA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAC5B;EACA;;EAEA;EACA,MAAM;IAAEC,KAAK;IAAEC;EAAe,CAAC,GAAGT,UAAU,CAACE,WAAW,CAAC;EAEzDH,SAAS,CAAC,MAAM;IACdW,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;MAC/D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,MAAME,UAAU,GAAGA,CAACC,KAAK,EAAEC,IAAI,KAAK;IAClC;IACA;IACA;IACA,MAAMC,YAAY,GAAGd,KAAK,CAACe,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKL,KAAK,CAAC;;IAExD;IACA,MAAMM,QAAQ,GAAGN,KAAK,CAAC,CAAC;;IAExB;IACAE,YAAY,CAACK,MAAM,CAACD,QAAQ,EAAE,CAAC,EAAEL,IAAI,CAAC;;IAEtC;IACAZ,cAAc,CAACa,YAAY,CAAC;EAC9B,CAAC;EAED,oBACElB,OAAA;IAAAwB,QAAA,EACGpB,KAAK,CAACqB,GAAG,CAAC,CAACR,IAAI,EAAED,KAAK,kBACrBhB,OAAA,CAACH,IAAI;MAAemB,KAAK,EAAEA,KAAM;MAACC,IAAI,EAAEA,IAAK;MAACf,MAAM,EAAEa;IAAW,GAAtDE,IAAI,CAACS,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiD,CACpE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC3B,EAAA,CA/CQF,QAAQ;AAAA8B,EAAA,GAAR9B,QAAQ;AAiDjB,eAAeA,QAAQ;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}