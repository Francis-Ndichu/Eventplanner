{"ast":null,"code":"var _jsxFileName = \"/home/francis/EventPlanner/client/src/Components/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from 'react';\nimport Task from './Task';\nimport TaskContext from './TaskContext';\nimport { useAuth } from './AuthContext';\nimport { useDrop } from 'react-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList() {\n  _s();\n  const {\n    tasks,\n    setTasks\n  } = useContext(TaskContext);\n  const {\n    user\n  } = useAuth();\n  const TASK_WIDTH = 200; // Example width, adjust as needed\n\n  useEffect(() => {\n    // Fetch tasks from the database or local storage\n    fetchTasks();\n  }, []);\n  const fetchTasks = async () => {\n    try {\n      // Retrieve tasks from local storage\n      const storedTasks = localStorage.getItem('tasks');\n\n      // If tasks are found in local storage, parse and update the tasks state in TaskContext\n      if (storedTasks) {\n        const parsedTasks = JSON.parse(storedTasks);\n\n        // Sort tasks based on their positions\n        parsedTasks.sort((a, b) => a.position - b.position);\n        setTasks(parsedTasks);\n      }\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n  const handleDrop = (draggedId, targetIndex) => {\n    const updatedTasks = [...tasks];\n    const draggedTask = updatedTasks.find(task => task.id === draggedId);\n    const draggedIndex = updatedTasks.indexOf(draggedTask);\n\n    // Calculate the target index based on the horizontal position\n    const targetX = targetIndex * TASK_WIDTH; // Assuming TASK_WIDTH is the width of each task\n    const draggedX = draggedIndex * TASK_WIDTH;\n    const direction = draggedX < targetX ? 1 : -1;\n    const targetIndexHorizontal = Math.floor(targetX / TASK_WIDTH);\n\n    // Update positions locally\n    updatedTasks.splice(draggedIndex, 1);\n    updatedTasks.splice(targetIndexHorizontal + (direction === 1 ? -1 : 0), 0, draggedTask);\n    setTasks(updatedTasks);\n\n    // Update positions in local storage\n    try {\n      localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n    } catch (error) {\n      console.error('Error updating task positions in local storage:', error);\n    }\n  };\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: 'TASK',\n    drop: (item, monitor) => {\n      const draggedId = item.id;\n      const targetIndex = tasks.length; // Dropping at the end of the list\n      handleDrop(draggedId, targetIndex);\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    style: {\n      minHeight: '100vh',\n      background: isOver ? 'lightblue' : 'white'\n    },\n    children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Task, {\n      index: index,\n      task: task,\n      sourceSection: task.section,\n      isAdmin: user.role === 'admin'\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"wML3L9RYsnItldClFVlRnA4nzTE=\", false, function () {\n  return [useAuth, useDrop];\n});\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useContext","useEffect","Task","TaskContext","useAuth","useDrop","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","user","TASK_WIDTH","fetchTasks","storedTasks","localStorage","getItem","parsedTasks","JSON","parse","sort","a","b","position","error","console","handleDrop","draggedId","targetIndex","updatedTasks","draggedTask","find","task","id","draggedIndex","indexOf","targetX","draggedX","direction","targetIndexHorizontal","Math","floor","splice","setItem","stringify","isOver","drop","accept","item","monitor","length","collect","ref","style","minHeight","background","children","map","index","sourceSection","section","isAdmin","role","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/francis/EventPlanner/client/src/Components/TaskList.js"],"sourcesContent":["import React, { useContext, useEffect } from 'react';\nimport Task from './Task';\nimport TaskContext from './TaskContext';\nimport { useAuth } from './AuthContext';\nimport { useDrop } from 'react-dnd';\n\nfunction TaskList() {\n  const { tasks, setTasks } = useContext(TaskContext);\n  const { user } = useAuth();\n  const TASK_WIDTH = 200; // Example width, adjust as needed\n\n  useEffect(() => {\n    // Fetch tasks from the database or local storage\n    fetchTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    try {\n      // Retrieve tasks from local storage\n      const storedTasks = localStorage.getItem('tasks');\n\n      // If tasks are found in local storage, parse and update the tasks state in TaskContext\n      if (storedTasks) {\n        const parsedTasks = JSON.parse(storedTasks);\n\n        // Sort tasks based on their positions\n        parsedTasks.sort((a, b) => a.position - b.position);\n\n        setTasks(parsedTasks);\n      }\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  const handleDrop = (draggedId, targetIndex) => {\n    const updatedTasks = [...tasks];\n    const draggedTask = updatedTasks.find(task => task.id === draggedId);\n    const draggedIndex = updatedTasks.indexOf(draggedTask);\n  \n    // Calculate the target index based on the horizontal position\n    const targetX = targetIndex * TASK_WIDTH; // Assuming TASK_WIDTH is the width of each task\n    const draggedX = draggedIndex * TASK_WIDTH;\n    const direction = draggedX < targetX ? 1 : -1;\n    const targetIndexHorizontal = Math.floor(targetX / TASK_WIDTH);\n  \n    // Update positions locally\n    updatedTasks.splice(draggedIndex, 1);\n    updatedTasks.splice(targetIndexHorizontal + (direction === 1 ? -1 : 0), 0, draggedTask);\n    setTasks(updatedTasks);\n  \n    // Update positions in local storage\n    try {\n      localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n    } catch (error) {\n      console.error('Error updating task positions in local storage:', error);\n    }\n  };\n  \n\n  const [{ isOver }, drop] = useDrop({\n    accept: 'TASK',\n    drop: (item, monitor) => {\n      const draggedId = item.id;\n      const targetIndex = tasks.length; // Dropping at the end of the list\n      handleDrop(draggedId, targetIndex);\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver(),\n    }),\n  });\n\n  return (\n    <div ref={drop} style={{ minHeight: '100vh', background: isOver ? 'lightblue' : 'white' }}>\n      {tasks.map((task, index) => (\n        <Task\n          key={task.id}\n          index={index}\n          task={task}\n          sourceSection={task.section}\n          isAdmin={user.role === 'admin'}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default TaskList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}