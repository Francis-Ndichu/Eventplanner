{"ast":null,"code":"var _jsxFileName = \"/home/francis/EventPlanner/client/src/Components/Task.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport { ItemTypes } from './ItemTypes';\nimport { useAuth } from './AuthContext';\nimport TaskContext from './TaskContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Task({\n  task,\n  index,\n  moveTask,\n  sourceSection\n}) {\n  _s();\n  const [showModal, setShowModal] = useState(false);\n  const [taskName, setTaskName] = useState(task.name);\n  const [dateDue, setDateDue] = useState(task.due_date || '');\n  const [priority, setPriority] = useState(task.priority);\n  const [selectedParticipants, setSelectedParticipants] = useState([]);\n  const {\n    user\n  } = useAuth();\n  const {\n    setSourceSection,\n    tasks\n  } = useContext(TaskContext);\n  const [deleteStatus, setDeleteStatus] = useState('');\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: ItemTypes.TASK,\n    item: {\n      type: ItemTypes.TASK,\n      task,\n      index\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const determineNewSourceSection = (dragIndex, hoverIndex, sourceSection) => {\n    // If the dragIndex is less than the hoverIndex, the card is moving down\n    // If the dragIndex is greater than the hoverIndex, the card is moving up\n    const verticalMovement = dragIndex < hoverIndex ? 'down' : 'up';\n\n    // Compare the sourceSection with the targetSection to determine horizontal movement\n    const horizontalMovement = sourceSection === 'sourceSection' ? 'right' : 'left';\n\n    // Assuming there are only two sections: 'sourceSection' and 'targetSection'\n    // If the card is moving vertically and it's already in the 'sourceSection'\n    // move it to the 'targetSection'\n    if (verticalMovement === 'down' && sourceSection === 'sourceSection') {\n      return 'targetSection';\n    }\n\n    // If the card is moving vertically and it's already in the 'targetSection'\n    // move it to the 'sourceSection'\n    if (verticalMovement === 'up' && sourceSection === 'targetSection') {\n      return 'sourceSection';\n    }\n\n    // If the card is moving horizontally, keep it in the same section\n    return sourceSection;\n  };\n  const [, drop] = useDrop({\n    accept: ItemTypes.TASK,\n    hover(item, monitor) {\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      // Determine the source section and target section based on your application logic\n      const sourceSection = item.section; // Assuming the section is stored in the item\n\n      moveTask(dragIndex, hoverIndex, sourceSection, 'targetSection');\n      item.index = hoverIndex;\n\n      // Update the sourceSection to the appropriate new value based on your logic\n      const newSourceSection = determineNewSourceSection(); // Implement your logic here\n      setSourceSection(newSourceSection);\n    }\n  });\n  const opacity = isDragging ? 0.5 : 1;\n  const handlePriorityChange = e => {\n    setPriority(e.target.value);\n  };\n  const handleParticipantChange = e => {\n    const participantId = e.target.value;\n    if (e.target.checked) {\n      setSelectedParticipants([...selectedParticipants, participantId]);\n    } else {\n      setSelectedParticipants(selectedParticipants.filter(id => id !== participantId));\n    }\n  };\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n  const handleShowModal = () => {\n    setShowModal(true);\n  };\n  const handleSaveChanges = async () => {\n    const updatedTaskData = {\n      name: taskName,\n      due_date: dateDue,\n      priority: priority,\n      assigned_users: participants.filter(participant => selectedParticipants.includes(participant.id))\n      // Add other task properties here\n    };\n    try {\n      const response = await fetch(`http://localhost:5555/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedTaskData)\n      });\n      if (response.ok) {\n        console.log(\"Task updated successfully:\", task.id);\n        setShowModal(false); // Close the modal after successful update\n        // Optionally, you can update your state to reflect the update\n      } else {\n        console.error(\"Error updating task:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n  const handleDeleteTask = async () => {\n    try {\n      const response = await fetch(`http://localhost:5555/tasks/${task.id}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        // If task is deleted successfully, update the delete status\n        setDeleteStatus('Task deleted successfully');\n      } else {\n        // If there's an error, update the delete status accordingly\n        setDeleteStatus(`Error deleting task: ${response.statusText}`);\n      }\n    } catch (error) {\n      // If there's an error, update the delete status accordingly\n      setDeleteStatus(`Error deleting task: ${error.message}`);\n    }\n  };\n\n  // Effect to update the delete status when the task ID changes\n  useEffect(() => {\n    setDeleteStatus('');\n  }, [task.id]);\n\n  // Find the task with the corresponding ID\n  const selectedTask = tasks.find(t => t.id === task.id);\n  // Extract participants from the selected task\n  const participants = selectedTask ? selectedTask.assigned_users : [];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: node => drag(drop(node)),\n      style: {\n        opacity\n      },\n      children: /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: task.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Due Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this), \" \", task.due_date || 'No due date', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Priority:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 15\n            }, this), \" \", task.priority, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Assigned Users:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this), \" \", participants.map(participant => participant.fullName).join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this), user && user.role === 'admin' && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              onClick: handleShowModal,\n              children: \"Update Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"danger\",\n              onClick: handleDeleteTask,\n              children: \"Delete Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showModal,\n      onHide: handleCloseModal,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Update Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n            children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                htmlFor: \"taskName\",\n                children: \"Task Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                id: \"taskName\",\n                placeholder: \"Task Name\",\n                value: taskName,\n                onChange: e => setTaskName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                htmlFor: \"dateDue\",\n                children: \"Date Due\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                id: \"dateDue\",\n                type: \"date\",\n                placeholder: \"Date Due\",\n                value: dateDue,\n                onChange: e => setDateDue(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                htmlFor: \"priority\",\n                children: \"Priority\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n                id: \"priority\",\n                onChange: handlePriorityChange,\n                value: priority,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Select Priority\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"High\",\n                  children: \"High\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"Medium\",\n                  children: \"Medium\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"Low\",\n                  children: \"Low\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              className: \"mb-3\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Participants\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 206,\n                columnNumber: 17\n              }, this), participants.map(participant => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                  type: \"checkbox\",\n                  id: `participant-${participant.id}`,\n                  label: `${participant.username} - ${participant.fullName}`,\n                  value: participant.id,\n                  checked: selectedParticipants.includes(participant.id),\n                  onChange: handleParticipantChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 21\n                }, this)\n              }, participant.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleCloseModal,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handleSaveChanges,\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Task, \"MsM/XAfjwOoEh8zE9Ln9J1ITMGg=\", false, function () {\n  return [useAuth, useDrag, useDrop];\n});\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","useState","useContext","useEffect","useDrag","useDrop","Card","Button","Modal","Form","ItemTypes","useAuth","TaskContext","jsxDEV","_jsxDEV","Fragment","_Fragment","Task","task","index","moveTask","sourceSection","_s","showModal","setShowModal","taskName","setTaskName","name","dateDue","setDateDue","due_date","priority","setPriority","selectedParticipants","setSelectedParticipants","user","setSourceSection","tasks","deleteStatus","setDeleteStatus","isDragging","drag","type","TASK","item","collect","monitor","determineNewSourceSection","dragIndex","hoverIndex","verticalMovement","horizontalMovement","drop","accept","hover","section","newSourceSection","opacity","handlePriorityChange","e","target","value","handleParticipantChange","participantId","checked","filter","id","handleCloseModal","handleShowModal","handleSaveChanges","updatedTaskData","assigned_users","participants","participant","includes","response","fetch","method","headers","body","JSON","stringify","ok","console","log","error","statusText","handleDeleteTask","message","selectedTask","find","t","children","ref","node","style","Body","Title","fileName","_jsxFileName","lineNumber","columnNumber","Text","map","fullName","join","role","variant","onClick","show","onHide","Header","closeButton","Group","className","Label","htmlFor","Control","placeholder","onChange","Select","Check","label","username","Footer","_c","$RefreshReg$"],"sources":["/home/francis/EventPlanner/client/src/Components/Task.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport { ItemTypes } from './ItemTypes';\nimport { useAuth } from './AuthContext';\nimport TaskContext from './TaskContext';\n\nfunction Task({ task, index, moveTask, sourceSection }) {\n  const [showModal, setShowModal] = useState(false);\n  const [taskName, setTaskName] = useState(task.name);\n  const [dateDue, setDateDue] = useState(task.due_date || '');\n  const [priority, setPriority] = useState(task.priority);\n  const [selectedParticipants, setSelectedParticipants] = useState([]);\n  const { user } = useAuth();\n  const { setSourceSection, tasks } = useContext(TaskContext);\n  const [deleteStatus, setDeleteStatus] = useState('');\n\n  const [{ isDragging }, drag] = useDrag({\n    type: ItemTypes.TASK,\n    item: { type: ItemTypes.TASK, task, index },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n  const determineNewSourceSection = (dragIndex, hoverIndex, sourceSection) => {\n    // If the dragIndex is less than the hoverIndex, the card is moving down\n    // If the dragIndex is greater than the hoverIndex, the card is moving up\n    const verticalMovement = dragIndex < hoverIndex ? 'down' : 'up';\n  \n    // Compare the sourceSection with the targetSection to determine horizontal movement\n    const horizontalMovement = sourceSection === 'sourceSection' ? 'right' : 'left';\n  \n    // Assuming there are only two sections: 'sourceSection' and 'targetSection'\n    // If the card is moving vertically and it's already in the 'sourceSection'\n    // move it to the 'targetSection'\n    if (verticalMovement === 'down' && sourceSection === 'sourceSection') {\n      return 'targetSection';\n    }\n  \n    // If the card is moving vertically and it's already in the 'targetSection'\n    // move it to the 'sourceSection'\n    if (verticalMovement === 'up' && sourceSection === 'targetSection') {\n      return 'sourceSection';\n    }\n  \n    // If the card is moving horizontally, keep it in the same section\n    return sourceSection;\n  };\n  \n  const [, drop] = useDrop({\n    accept: ItemTypes.TASK,\n    hover(item, monitor) {\n      const dragIndex = item.index;\n      const hoverIndex = index;\n  \n      if (dragIndex === hoverIndex) {\n        return;\n      }\n  \n      // Determine the source section and target section based on your application logic\n      const sourceSection = item.section; // Assuming the section is stored in the item\n  \n      moveTask(dragIndex, hoverIndex, sourceSection, 'targetSection');\n  \n      item.index = hoverIndex;\n  \n      // Update the sourceSection to the appropriate new value based on your logic\n      const newSourceSection = determineNewSourceSection(); // Implement your logic here\n      setSourceSection(newSourceSection);\n    },\n  });\n  \n  const opacity = isDragging ? 0.5 : 1;\n\n  const handlePriorityChange = (e) => {\n    setPriority(e.target.value);\n  };\n\n  const handleParticipantChange = (e) => {\n    const participantId = e.target.value;\n    if (e.target.checked) {\n      setSelectedParticipants([...selectedParticipants, participantId]);\n    } else {\n      setSelectedParticipants(selectedParticipants.filter(id => id !== participantId));\n    }\n  };\n\n  const handleCloseModal = () => {\n    setShowModal(false);\n  };\n\n  const handleShowModal = () => {\n    setShowModal(true);\n  };\n  const handleSaveChanges = async () => {\n    const updatedTaskData = {\n      name: taskName,\n      due_date: dateDue,\n      priority: priority,\n      assigned_users: participants.filter(participant => selectedParticipants.includes(participant.id)),\n      // Add other task properties here\n    };\n\n    try {\n      const response = await fetch(`http://localhost:5555/tasks/${task.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updatedTaskData),\n      });\n      if (response.ok) {\n        console.log(\"Task updated successfully:\", task.id);\n        setShowModal(false); // Close the modal after successful update\n        // Optionally, you can update your state to reflect the update\n      } else {\n        console.error(\"Error updating task:\", response.statusText);\n      }\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n        const handleDeleteTask = async () => {\n            try {\n                const response = await fetch(`http://localhost:5555/tasks/${task.id}`, {\n                    method: 'DELETE'\n                });\n                if (response.ok) {\n                    // If task is deleted successfully, update the delete status\n                    setDeleteStatus('Task deleted successfully');\n                } else {\n                    // If there's an error, update the delete status accordingly\n                    setDeleteStatus(`Error deleting task: ${response.statusText}`);\n                }\n            } catch (error) {\n                // If there's an error, update the delete status accordingly\n                setDeleteStatus(`Error deleting task: ${error.message}`);\n            }\n        };\n        \n        // Effect to update the delete status when the task ID changes\n        useEffect(() => {\n            setDeleteStatus('');\n        }, [task.id]);\n   \n\n   // Find the task with the corresponding ID\n   const selectedTask = tasks.find(t => t.id === task.id);\n   // Extract participants from the selected task\n   const participants = selectedTask ? selectedTask.assigned_users : [];\n \n\n   return (\n    <>\n      <div ref={(node) => drag(drop(node))} style={{ opacity }}>\n        <Card>\n          <Card.Body>\n            <Card.Title>{task.name}</Card.Title>\n            <Card.Text>\n              <strong>Due Date:</strong> {task.due_date || 'No due date'}\n              <br />\n              <strong>Priority:</strong> {task.priority}\n              <br />\n              <strong>Assigned Users:</strong> {participants.map(participant => participant.fullName).join(', ')}\n            </Card.Text>\n            {user && user.role === 'admin' && (\n              <>\n                <Button variant=\"primary\" onClick={handleShowModal}>Update Task</Button>\n                <Button variant=\"danger\" onClick={handleDeleteTask}>Delete Task</Button>\n              </>\n            )}\n          </Card.Body>\n        </Card>\n      </div>\n\n      {/* Update Task Modal */}\n      <Modal show={showModal} onHide={handleCloseModal}>\n        <Modal.Header closeButton>\n          <Modal.Title>Update Task</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <fieldset>\n              <Form.Group className=\"mb-3\">\n                <Form.Label htmlFor=\"taskName\">Task Name</Form.Label>\n                <Form.Control id=\"taskName\" placeholder=\"Task Name\" value={taskName} onChange={e => setTaskName(e.target.value)} />\n              </Form.Group>\n              <Form.Group className=\"mb-3\">\n                <Form.Label htmlFor=\"dateDue\">Date Due</Form.Label>\n                <Form.Control id=\"dateDue\" type=\"date\" placeholder=\"Date Due\" value={dateDue} onChange={e => setDateDue(e.target.value)} />\n              </Form.Group>\n              <Form.Group className=\"mb-3\">\n                <Form.Label htmlFor=\"priority\">Priority</Form.Label>\n                <Form.Select id=\"priority\" onChange={handlePriorityChange} value={priority}>\n                  <option value=\"\">Select Priority</option>\n                  <option value=\"High\">High</option>\n                  <option value=\"Medium\">Medium</option>\n                  <option value=\"Low\">Low</option>\n                </Form.Select>\n              </Form.Group>\n              <Form.Group className=\"mb-3\">\n                <Form.Label>Participants</Form.Label>\n                {participants.map(participant => (\n                  <div key={participant.id}>\n                    <Form.Check\n                      type=\"checkbox\"\n                      id={`participant-${participant.id}`}\n                      label={`${participant.username} - ${participant.fullName}`}\n                      value={participant.id}\n                      checked={selectedParticipants.includes(participant.id)}\n                      onChange={handleParticipantChange}\n                    />\n                  </div>\n                ))}\n              </Form.Group>\n            </fieldset>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleCloseModal}>Close</Button>\n          <Button variant=\"primary\" onClick={handleSaveChanges}>Save Changes</Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n}\n\nexport default Task;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}