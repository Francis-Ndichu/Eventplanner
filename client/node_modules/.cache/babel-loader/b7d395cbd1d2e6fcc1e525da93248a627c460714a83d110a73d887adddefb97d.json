{"ast":null,"code":"var _jsxFileName = \"/home/francis/EventPlanner/client/src/Components/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport Task from './Task';\nimport TaskContext from './TaskContext';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList({\n  onDrop\n}) {\n  _s();\n  const {\n    tasks,\n    setTasks\n  } = useContext(TaskContext);\n  const {\n    user\n  } = useAuth();\n  const handleDrop = e => {\n    e.preventDefault();\n    try {\n      const droppedTaskData = e.dataTransfer.getData('task');\n      if (!droppedTaskData) {\n        // Handle empty data\n        console.error(\"Error: Empty dropped task data.\");\n        return;\n      }\n      const droppedTask = JSON.parse(droppedTaskData);\n      // Proceed with handling the dropped task\n      onDrop(droppedTask);\n    } catch (error) {\n      console.error(\"Error parsing dropped task data:\", error);\n    }\n  };\n  const allowDrop = e => {\n    e.preventDefault();\n  };\n  const moveTask = (dragIndex, hoverIndex, sourceSection, targetSection) => {\n    // Create a copy of the tasks arrays for source and target sections\n    const updatedSourceTasks = [...tasks[sourceSection]];\n    const updatedTargetTasks = [...tasks[targetSection]];\n\n    // Get the dragged task\n    const draggedTask = updatedSourceTasks[dragIndex];\n\n    // Remove the task from the source section\n    updatedSourceTasks.splice(dragIndex, 1);\n\n    // Insert the task into the target section at the hover index\n    updatedTargetTasks.splice(hoverIndex, 0, draggedTask);\n\n    // Update the tasks arrays in state\n    setTasks({\n      ...tasks,\n      [sourceSection]: updatedSourceTasks,\n      [targetSection]: updatedTargetTasks\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onDrop: handleDrop,\n    onDragOver: allowDrop,\n    children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Task, {\n      index: index,\n      task: task,\n      moveTask: moveTask // Pass moveTask as a prop to Task component\n      ,\n      isAdmin: user.role === 'admin'\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"XeI+cjhc9Jdm/ZzRXAUQKX3Vmg4=\", false, function () {\n  return [useAuth];\n});\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useContext","Task","TaskContext","useAuth","jsxDEV","_jsxDEV","TaskList","onDrop","_s","tasks","setTasks","user","handleDrop","e","preventDefault","droppedTaskData","dataTransfer","getData","console","error","droppedTask","JSON","parse","allowDrop","moveTask","dragIndex","hoverIndex","sourceSection","targetSection","updatedSourceTasks","updatedTargetTasks","draggedTask","splice","onDragOver","children","map","task","index","isAdmin","role","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/francis/EventPlanner/client/src/Components/TaskList.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport Task from './Task';\nimport TaskContext from './TaskContext';\nimport { useAuth } from './AuthContext';\n\nfunction TaskList({ onDrop }) {\n  const { tasks, setTasks } = useContext(TaskContext);\n  const { user } = useAuth();\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    \n    try {\n      const droppedTaskData = e.dataTransfer.getData('task');\n      if (!droppedTaskData) {\n        // Handle empty data\n        console.error(\"Error: Empty dropped task data.\");\n        return;\n      }\n  \n      const droppedTask = JSON.parse(droppedTaskData);\n      // Proceed with handling the dropped task\n      onDrop(droppedTask);\n    } catch (error) {\n      console.error(\"Error parsing dropped task data:\", error);\n    }\n  };\n  \n\n  const allowDrop = (e) => {\n    e.preventDefault();\n  };\n\n  const moveTask = (dragIndex, hoverIndex, sourceSection, targetSection) => {\n    // Create a copy of the tasks arrays for source and target sections\n    const updatedSourceTasks = [...tasks[sourceSection]];\n    const updatedTargetTasks = [...tasks[targetSection]];\n  \n    // Get the dragged task\n    const draggedTask = updatedSourceTasks[dragIndex];\n  \n    // Remove the task from the source section\n    updatedSourceTasks.splice(dragIndex, 1);\n  \n    // Insert the task into the target section at the hover index\n    updatedTargetTasks.splice(hoverIndex, 0, draggedTask);\n  \n    // Update the tasks arrays in state\n    setTasks({\n      ...tasks,\n      [sourceSection]: updatedSourceTasks,\n      [targetSection]: updatedTargetTasks\n    });\n  };\n  \n  \n  \n\n  return (\n    <div onDrop={handleDrop} onDragOver={allowDrop}>\n      {tasks.map((task, index) => (\n        <Task\n          key={task.id}\n          index={index}\n          task={task}\n          moveTask={moveTask} // Pass moveTask as a prop to Task component\n          isAdmin={user.role === 'admin'}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default TaskList;\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,QAAQA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAC5B,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGV,UAAU,CAACE,WAAW,CAAC;EACnD,MAAM;IAAES;EAAK,CAAC,GAAGR,OAAO,CAAC,CAAC;EAE1B,MAAMS,UAAU,GAAIC,CAAC,IAAK;IACxBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACF,MAAMC,eAAe,GAAGF,CAAC,CAACG,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MACtD,IAAI,CAACF,eAAe,EAAE;QACpB;QACAG,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC;QAChD;MACF;MAEA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACP,eAAe,CAAC;MAC/C;MACAR,MAAM,CAACa,WAAW,CAAC;IACrB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D;EACF,CAAC;EAGD,MAAMI,SAAS,GAAIV,CAAC,IAAK;IACvBA,CAAC,CAACC,cAAc,CAAC,CAAC;EACpB,CAAC;EAED,MAAMU,QAAQ,GAAGA,CAACC,SAAS,EAAEC,UAAU,EAAEC,aAAa,EAAEC,aAAa,KAAK;IACxE;IACA,MAAMC,kBAAkB,GAAG,CAAC,GAAGpB,KAAK,CAACkB,aAAa,CAAC,CAAC;IACpD,MAAMG,kBAAkB,GAAG,CAAC,GAAGrB,KAAK,CAACmB,aAAa,CAAC,CAAC;;IAEpD;IACA,MAAMG,WAAW,GAAGF,kBAAkB,CAACJ,SAAS,CAAC;;IAEjD;IACAI,kBAAkB,CAACG,MAAM,CAACP,SAAS,EAAE,CAAC,CAAC;;IAEvC;IACAK,kBAAkB,CAACE,MAAM,CAACN,UAAU,EAAE,CAAC,EAAEK,WAAW,CAAC;;IAErD;IACArB,QAAQ,CAAC;MACP,GAAGD,KAAK;MACR,CAACkB,aAAa,GAAGE,kBAAkB;MACnC,CAACD,aAAa,GAAGE;IACnB,CAAC,CAAC;EACJ,CAAC;EAKD,oBACEzB,OAAA;IAAKE,MAAM,EAAEK,UAAW;IAACqB,UAAU,EAAEV,SAAU;IAAAW,QAAA,EAC5CzB,KAAK,CAAC0B,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrBhC,OAAA,CAACJ,IAAI;MAEHoC,KAAK,EAAEA,KAAM;MACbD,IAAI,EAAEA,IAAK;MACXZ,QAAQ,EAAEA,QAAS,CAAC;MAAA;MACpBc,OAAO,EAAE3B,IAAI,CAAC4B,IAAI,KAAK;IAAQ,GAJ1BH,IAAI,CAACI,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKb,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACpC,EAAA,CAlEQF,QAAQ;EAAA,QAEEH,OAAO;AAAA;AAAA0C,EAAA,GAFjBvC,QAAQ;AAoEjB,eAAeA,QAAQ;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}