{"ast":null,"code":"var _jsxFileName = \"/home/francis/EventPlanner/client/src/Components/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Task from './Task';\nimport TaskContext from './TaskContext'; // Update import statement\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList() {\n  _s();\n  const {\n    tasks,\n    setTasks\n  } = useContext(TaskContext);\n  const onDragEnd = result => {\n    const {\n      destination,\n      source\n    } = result;\n    if (!destination) return;\n    const newTasks = Array.from(tasks);\n    const [removed] = newTasks.splice(source.index, 1);\n    newTasks.splice(destination.index, 0, removed);\n    setTasks(newTasks);\n  };\n\n  // Assuming tasks.id is the ID you want to use as droppableId\n  const droppableId = String(tasks.id);\n  return /*#__PURE__*/_jsxDEV(Droppable, {\n    droppableId: droppableId,\n    direction: \"horizontal\",\n    children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: provided.innerRef,\n      ...provided.droppableProps,\n      children: [tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n        draggableId: String(task.id),\n        index: index,\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          ...provided.draggableProps,\n          ...provided.dragHandleProps,\n          children: /*#__PURE__*/_jsxDEV(Task, {\n            task: task\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)\n      }, String(task.id), false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)), provided.placeholder]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"FznqgBpv+iOCTDu0hlplf+tX4PU=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useContext","Droppable","Draggable","Task","TaskContext","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","onDragEnd","result","destination","source","newTasks","Array","from","removed","splice","index","droppableId","String","id","direction","children","provided","ref","innerRef","droppableProps","map","task","draggableId","draggableProps","dragHandleProps","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","_c","$RefreshReg$"],"sources":["/home/francis/EventPlanner/client/src/Components/TaskList.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Task from './Task';\nimport TaskContext from './TaskContext'; // Update import statement\n\nfunction TaskList() {\n  const { tasks, setTasks } = useContext(TaskContext);\n\n  const onDragEnd = (result) => {\n    const { destination, source } = result;\n    if (!destination) return;\n\n    const newTasks = Array.from(tasks);\n    const [removed] = newTasks.splice(source.index, 1);\n    newTasks.splice(destination.index, 0, removed);\n    setTasks(newTasks);\n  };\n\n  // Assuming tasks.id is the ID you want to use as droppableId\n  const droppableId = String(tasks.id);\n\n  return (\n    <Droppable droppableId={droppableId} direction=\"horizontal\">\n      {(provided) => (\n        <div ref={provided.innerRef} {...provided.droppableProps}>\n         {tasks.map((task, index) => (\n                <Draggable key={String(task.id)} draggableId={String(task.id)} index={index}>\n                  {(provided) => (\n                    <div\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                    >\n                      <Task task={task} />\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n\n          {provided.placeholder}\n        </div>\n      )}\n    </Droppable>\n  );\n}\n\nexport default TaskList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,SAAS,EAAEC,SAAS,QAAQ,qBAAqB;AAC1D,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGV,UAAU,CAACI,WAAW,CAAC;EAEnD,MAAMO,SAAS,GAAIC,MAAM,IAAK;IAC5B,MAAM;MAAEC,WAAW;MAAEC;IAAO,CAAC,GAAGF,MAAM;IACtC,IAAI,CAACC,WAAW,EAAE;IAElB,MAAME,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAACR,KAAK,CAAC;IAClC,MAAM,CAACS,OAAO,CAAC,GAAGH,QAAQ,CAACI,MAAM,CAACL,MAAM,CAACM,KAAK,EAAE,CAAC,CAAC;IAClDL,QAAQ,CAACI,MAAM,CAACN,WAAW,CAACO,KAAK,EAAE,CAAC,EAAEF,OAAO,CAAC;IAC9CR,QAAQ,CAACK,QAAQ,CAAC;EACpB,CAAC;;EAED;EACA,MAAMM,WAAW,GAAGC,MAAM,CAACb,KAAK,CAACc,EAAE,CAAC;EAEpC,oBACEjB,OAAA,CAACL,SAAS;IAACoB,WAAW,EAAEA,WAAY;IAACG,SAAS,EAAC,YAAY;IAAAC,QAAA,EACvDC,QAAQ,iBACRpB,OAAA;MAAKqB,GAAG,EAAED,QAAQ,CAACE,QAAS;MAAA,GAAKF,QAAQ,CAACG,cAAc;MAAAJ,QAAA,GACtDhB,KAAK,CAACqB,GAAG,CAAC,CAACC,IAAI,EAAEX,KAAK,kBAChBd,OAAA,CAACJ,SAAS;QAAuB8B,WAAW,EAAEV,MAAM,CAACS,IAAI,CAACR,EAAE,CAAE;QAACH,KAAK,EAAEA,KAAM;QAAAK,QAAA,EACxEC,QAAQ,iBACRpB,OAAA;UACEqB,GAAG,EAAED,QAAQ,CAACE,QAAS;UAAA,GACnBF,QAAQ,CAACO,cAAc;UAAA,GACvBP,QAAQ,CAACQ,eAAe;UAAAT,QAAA,eAE5BnB,OAAA,CAACH,IAAI;YAAC4B,IAAI,EAAEA;UAAK;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjB;MACN,GATahB,MAAM,CAACS,IAAI,CAACR,EAAE,CAAC;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAUpB,CACZ,CAAC,EAELZ,QAAQ,CAACa,WAAW;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAEhB;AAAC9B,EAAA,CAvCQD,QAAQ;AAAAiC,EAAA,GAARjC,QAAQ;AAyCjB,eAAeA,QAAQ;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}