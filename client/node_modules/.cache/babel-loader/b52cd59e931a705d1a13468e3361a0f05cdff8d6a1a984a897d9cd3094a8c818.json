{"ast":null,"code":"var _jsxFileName = \"/home/francis/EventPlanner/client/src/Components/Task.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport Card from 'react-bootstrap/Card';\nimport { ItemTypes } from './ItemTypes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Task({\n  task,\n  index\n}) {\n  _s();\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: ItemTypes.TASK,\n    item: {\n      type: ItemTypes.TASK,\n      task,\n      index\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const identify = (index, pointer) => {\n    return pointer.instance.id;\n  };\n  const [, drop] = useDrop({\n    accept: ItemTypes.TASK,\n    hover(item, monitor) {\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current.getBoundingClientRect();\n\n      // Get vertical middle\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      // Perform the move\n      // Rearrange the tasks array based on drag and drop\n      const updatedTasks = Array.from(item.tasks); // Copy the tasks array\n      const [draggedItem] = updatedTasks.splice(dragIndex, 1); // Remove the dragged task\n      updatedTasks.splice(hoverIndex, 0, draggedItem); // Insert the dragged task at hoverIndex\n      // You can update your state with the updatedTasks array here\n\n      item.index = hoverIndex; // Update the index of the dragged item\n\n      console.log('Dropping task:', identify(index, monitor)); // Log the dropped item id\n    }\n  });\n  const ref = React.useRef(null);\n  drag(ref);\n  drop(ref);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    style: {\n      opacity: isDragging ? 0.5 : 1\n    },\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(Card.Body, {\n        children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n          children: task.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Due Date:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), \" \", task.due_date || 'No due date', /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Priority:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), \" \", task.priority, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Assigned Users:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), \" \", task.assigned_users.map(user => user.fullName).join(', ')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(Task, \"Ifw/hWtrfNyCzXc02qVggIXA3Q0=\", false, function () {\n  return [useDrag, useDrop];\n});\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","useDrag","useDrop","Card","ItemTypes","jsxDEV","_jsxDEV","Task","task","index","_s","isDragging","drag","type","TASK","item","collect","monitor","identify","pointer","instance","id","drop","accept","hover","dragIndex","hoverIndex","hoverBoundingRect","ref","current","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","updatedTasks","Array","from","tasks","draggedItem","splice","console","log","useRef","style","opacity","children","Body","Title","name","fileName","_jsxFileName","lineNumber","columnNumber","Text","due_date","priority","assigned_users","map","user","fullName","join","_c","$RefreshReg$"],"sources":["/home/francis/EventPlanner/client/src/Components/Task.js"],"sourcesContent":["import React from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport Card from 'react-bootstrap/Card';\nimport { ItemTypes } from './ItemTypes';\n\nfunction Task({ task, index }) {\n    const [{ isDragging }, drag] = useDrag({\n        type: ItemTypes.TASK,\n        item: { type: ItemTypes.TASK, task, index },\n        collect: monitor => ({\n          isDragging: monitor.isDragging(),\n        }),\n      });\n      const identify = (index, pointer) => {\n        return pointer.instance.id;\n      }\n      \n      const [, drop] = useDrop({\n        accept: ItemTypes.TASK,\n        hover(item, monitor) {\n          const dragIndex = item.index;\n          const hoverIndex = index;\n      \n          // Don't replace items with themselves\n          if (dragIndex === hoverIndex) {\n            return;\n          }\n      \n          // Determine rectangle on screen\n          const hoverBoundingRect = ref.current.getBoundingClientRect();\n      \n          // Get vertical middle\n          const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      \n          // Determine mouse position\n          const clientOffset = monitor.getClientOffset();\n      \n          // Get pixels to the top\n          const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n      \n          // Only perform the move when the mouse has crossed half of the items height\n          // When dragging downwards, only move when the cursor is below 50%\n          // When dragging upwards, only move when the cursor is above 50%\n      \n          // Dragging downwards\n          if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n            return;\n          }\n      \n          // Dragging upwards\n          if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n            return;\n          }\n      \n          // Perform the move\n          // Rearrange the tasks array based on drag and drop\n          const updatedTasks = Array.from(item.tasks); // Copy the tasks array\n          const [draggedItem] = updatedTasks.splice(dragIndex, 1); // Remove the dragged task\n          updatedTasks.splice(hoverIndex, 0, draggedItem); // Insert the dragged task at hoverIndex\n          // You can update your state with the updatedTasks array here\n      \n          item.index = hoverIndex; // Update the index of the dragged item\n      \n          console.log('Dropping task:', identify(index, monitor)); // Log the dropped item id\n        },\n      });\n      \n      \n               \n    \n      const ref = React.useRef(null);\n      drag(ref);\n      drop(ref);\n    \n  return (\n    <div ref={ref} style={{ opacity: isDragging ? 0.5 : 1 }}>\n      <Card>\n        <Card.Body>\n          <Card.Title>{task.name}</Card.Title>\n          <Card.Text>\n            <strong>Due Date:</strong> {task.due_date || 'No due date'}\n            <br />\n            <strong>Priority:</strong> {task.priority}\n            <br />\n            <strong>Assigned Users:</strong> {task.assigned_users.map(user => user.fullName).join(', ')}\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default Task;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}