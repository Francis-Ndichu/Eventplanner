{"ast":null,"code":"var _jsxFileName = \"/home/francis/EventPlanner/client/src/Components/TaskList.js\",\n  _s = $RefreshSig$();\n// In TaskList.js\nimport React, { useContext } from 'react';\nimport Task from './Task';\nimport TaskContext from './TaskContext';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList() {\n  _s();\n  const {\n    tasks,\n    setTasks,\n    sourceSection,\n    setSourceSection,\n    onDrop\n  } = useContext(TaskContext);\n  const {\n    user\n  } = useAuth();\n  const userTasks = tasks.filter(task => task.assigned_users.some(assignedUser => assignedUser.id === user.id));\n  const handleDrop = e => {\n    e.preventDefault();\n    try {\n      const droppedTaskData = e.dataTransfer.getData('task');\n      if (!droppedTaskData) {\n        console.error(\"Error: Empty dropped task data.\");\n        return;\n      }\n      const droppedTask = JSON.parse(droppedTaskData);\n      onDrop(droppedTask);\n    } catch (error) {\n      console.error(\"Error parsing dropped task data:\", error);\n    }\n  };\n  const allowDrop = e => {\n    e.preventDefault();\n  };\n  const moveTask = (dragIndex, hoverIndex, sourceSection, targetSection) => {\n    // Ensure source and target sections are valid\n    if (!sourceSection || !targetSection) {\n      console.error(\"Error: Source or target section is not defined or does not exist.\");\n      return;\n    }\n\n    // Get the dragged task\n    const draggedTask = tasks.find(task => task.section === sourceSection)[dragIndex];\n\n    // Remove the dragged task from the source section\n    const updatedSourceTasks = tasks.filter(task => task.section === sourceSection && task.id !== draggedTask.id);\n\n    // Insert the dragged task into the target section at the hover index\n    const updatedTargetTasks = [...tasks];\n    updatedTargetTasks.splice(hoverIndex, 0, draggedTask);\n\n    // Update the tasks array in state\n    const updatedTasks = {\n      ...tasks,\n      [sourceSection]: updatedSourceTasks,\n      [targetSection]: updatedTargetTasks\n    };\n    setTasks(updatedTasks);\n\n    // Update the sourceSection in context\n    setSourceSection(sourceSection);\n\n    // Handle horizontal movement\n    const direction = dragIndex < hoverIndex ? 'right' : 'left';\n    if (direction === 'right') {\n      console.log('Moving right...');\n    } else {\n      console.log('Moving left...');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onDrop: handleDrop,\n    onDragOver: allowDrop,\n    children: userTasks.map((task, index) => /*#__PURE__*/_jsxDEV(Task, {\n      index: index,\n      task: task,\n      moveTask: (dragIndex, hoverIndex) => moveTask(dragIndex, hoverIndex, task.section, 'targetSection'),\n      sourceSection: task.section // Pass sourceSection dynamically\n      ,\n      isAdmin: user.role === 'admin'\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"+Ri9k0Zfh6HdFg3bhY6yPlDV0m8=\", false, function () {\n  return [useAuth];\n});\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useContext","Task","TaskContext","useAuth","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","sourceSection","setSourceSection","onDrop","user","userTasks","filter","task","assigned_users","some","assignedUser","id","handleDrop","e","preventDefault","droppedTaskData","dataTransfer","getData","console","error","droppedTask","JSON","parse","allowDrop","moveTask","dragIndex","hoverIndex","targetSection","draggedTask","find","section","updatedSourceTasks","updatedTargetTasks","splice","updatedTasks","direction","log","onDragOver","children","map","index","isAdmin","role","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/francis/EventPlanner/client/src/Components/TaskList.js"],"sourcesContent":["// In TaskList.js\nimport React, { useContext } from 'react';\nimport Task from './Task';\nimport TaskContext from './TaskContext';\nimport { useAuth } from './AuthContext';\n\nfunction TaskList() {\n  const { tasks, setTasks, sourceSection, setSourceSection, onDrop } = useContext(TaskContext);\n  const { user } = useAuth();\n\n  const userTasks = tasks.filter(task => task.assigned_users.some(assignedUser => assignedUser.id === user.id));\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    try {\n      const droppedTaskData = e.dataTransfer.getData('task');\n      if (!droppedTaskData) {\n        console.error(\"Error: Empty dropped task data.\");\n        return;\n      }\n      const droppedTask = JSON.parse(droppedTaskData);\n      onDrop(droppedTask);\n    } catch (error) {\n      console.error(\"Error parsing dropped task data:\", error);\n    }\n  };\n\n  const allowDrop = (e) => {\n    e.preventDefault();\n  };\n\n  const moveTask = (dragIndex, hoverIndex, sourceSection, targetSection) => {\n    // Ensure source and target sections are valid\n    if (!sourceSection || !targetSection) {\n      console.error(\"Error: Source or target section is not defined or does not exist.\");\n      return;\n    }\n  \n    // Get the dragged task\n    const draggedTask = tasks.find(task => task.section === sourceSection)[dragIndex];\n\n    // Remove the dragged task from the source section\n    const updatedSourceTasks = tasks.filter(task => task.section === sourceSection && task.id !== draggedTask.id);\n  \n    // Insert the dragged task into the target section at the hover index\n    const updatedTargetTasks = [...tasks];\n    updatedTargetTasks.splice(hoverIndex, 0, draggedTask);\n  \n    // Update the tasks array in state\n    const updatedTasks = {\n      ...tasks,\n      [sourceSection]: updatedSourceTasks,\n      [targetSection]: updatedTargetTasks\n    };\n    setTasks(updatedTasks);\n  \n    // Update the sourceSection in context\n    setSourceSection(sourceSection);\n  \n    // Handle horizontal movement\n    const direction = dragIndex < hoverIndex ? 'right' : 'left';\n    if (direction === 'right') {\n      console.log('Moving right...');\n    } else {\n      console.log('Moving left...');\n    }\n  };\n\n  return (\n    <div onDrop={handleDrop} onDragOver={allowDrop}>\n      {userTasks.map((task, index) => (\n        <Task\n          key={task.id}\n          index={index}\n          task={task}\n          moveTask={(dragIndex, hoverIndex) => moveTask(dragIndex, hoverIndex, task.section, 'targetSection')} \n          sourceSection={task.section} // Pass sourceSection dynamically\n          isAdmin={user.role === 'admin'}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default TaskList;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,aAAa;IAAEC,gBAAgB;IAAEC;EAAO,CAAC,GAAGZ,UAAU,CAACE,WAAW,CAAC;EAC5F,MAAM;IAAEW;EAAK,CAAC,GAAGV,OAAO,CAAC,CAAC;EAE1B,MAAMW,SAAS,GAAGN,KAAK,CAACO,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,cAAc,CAACC,IAAI,CAACC,YAAY,IAAIA,YAAY,CAACC,EAAE,KAAKP,IAAI,CAACO,EAAE,CAAC,CAAC;EAE7G,MAAMC,UAAU,GAAIC,CAAC,IAAK;IACxBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMC,eAAe,GAAGF,CAAC,CAACG,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MACtD,IAAI,CAACF,eAAe,EAAE;QACpBG,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC;QAChD;MACF;MACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACP,eAAe,CAAC;MAC/CZ,MAAM,CAACiB,WAAW,CAAC;IACrB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D;EACF,CAAC;EAED,MAAMI,SAAS,GAAIV,CAAC,IAAK;IACvBA,CAAC,CAACC,cAAc,CAAC,CAAC;EACpB,CAAC;EAED,MAAMU,QAAQ,GAAGA,CAACC,SAAS,EAAEC,UAAU,EAAEzB,aAAa,EAAE0B,aAAa,KAAK;IACxE;IACA,IAAI,CAAC1B,aAAa,IAAI,CAAC0B,aAAa,EAAE;MACpCT,OAAO,CAACC,KAAK,CAAC,mEAAmE,CAAC;MAClF;IACF;;IAEA;IACA,MAAMS,WAAW,GAAG7B,KAAK,CAAC8B,IAAI,CAACtB,IAAI,IAAIA,IAAI,CAACuB,OAAO,KAAK7B,aAAa,CAAC,CAACwB,SAAS,CAAC;;IAEjF;IACA,MAAMM,kBAAkB,GAAGhC,KAAK,CAACO,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACuB,OAAO,KAAK7B,aAAa,IAAIM,IAAI,CAACI,EAAE,KAAKiB,WAAW,CAACjB,EAAE,CAAC;;IAE7G;IACA,MAAMqB,kBAAkB,GAAG,CAAC,GAAGjC,KAAK,CAAC;IACrCiC,kBAAkB,CAACC,MAAM,CAACP,UAAU,EAAE,CAAC,EAAEE,WAAW,CAAC;;IAErD;IACA,MAAMM,YAAY,GAAG;MACnB,GAAGnC,KAAK;MACR,CAACE,aAAa,GAAG8B,kBAAkB;MACnC,CAACJ,aAAa,GAAGK;IACnB,CAAC;IACDhC,QAAQ,CAACkC,YAAY,CAAC;;IAEtB;IACAhC,gBAAgB,CAACD,aAAa,CAAC;;IAE/B;IACA,MAAMkC,SAAS,GAAGV,SAAS,GAAGC,UAAU,GAAG,OAAO,GAAG,MAAM;IAC3D,IAAIS,SAAS,KAAK,OAAO,EAAE;MACzBjB,OAAO,CAACkB,GAAG,CAAC,iBAAiB,CAAC;IAChC,CAAC,MAAM;MACLlB,OAAO,CAACkB,GAAG,CAAC,gBAAgB,CAAC;IAC/B;EACF,CAAC;EAED,oBACExC,OAAA;IAAKO,MAAM,EAAES,UAAW;IAACyB,UAAU,EAAEd,SAAU;IAAAe,QAAA,EAC5CjC,SAAS,CAACkC,GAAG,CAAC,CAAChC,IAAI,EAAEiC,KAAK,kBACzB5C,OAAA,CAACJ,IAAI;MAEHgD,KAAK,EAAEA,KAAM;MACbjC,IAAI,EAAEA,IAAK;MACXiB,QAAQ,EAAEA,CAACC,SAAS,EAAEC,UAAU,KAAKF,QAAQ,CAACC,SAAS,EAAEC,UAAU,EAAEnB,IAAI,CAACuB,OAAO,EAAE,eAAe,CAAE;MACpG7B,aAAa,EAAEM,IAAI,CAACuB,OAAQ,CAAC;MAAA;MAC7BW,OAAO,EAAErC,IAAI,CAACsC,IAAI,KAAK;IAAQ,GAL1BnC,IAAI,CAACI,EAAE;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMb,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAChD,EAAA,CA5EQD,QAAQ;EAAA,QAEEH,OAAO;AAAA;AAAAqD,EAAA,GAFjBlD,QAAQ;AA8EjB,eAAeA,QAAQ;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}