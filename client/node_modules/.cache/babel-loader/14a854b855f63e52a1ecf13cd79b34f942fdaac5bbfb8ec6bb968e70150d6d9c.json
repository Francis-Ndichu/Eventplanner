{"ast":null,"code":"var _jsxFileName = \"/home/francis/EventPlanner/client/src/Components/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport Task from './Task';\nimport TaskContext from './TaskContext';\nimport { useAuth } from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList({\n  onDrop\n}) {\n  _s();\n  const {\n    tasks,\n    setTasks\n  } = useContext(TaskContext);\n  const {\n    user\n  } = useAuth();\n  const handleDrop = e => {\n    e.preventDefault();\n    try {\n      const droppedTaskData = e.dataTransfer.getData('task');\n      if (!droppedTaskData) {\n        // Handle empty data\n        console.error(\"Error: Empty dropped task data.\");\n        return;\n      }\n      const droppedTask = JSON.parse(droppedTaskData);\n      // Proceed with handling the dropped task\n      onDrop(droppedTask);\n    } catch (error) {\n      console.error(\"Error parsing dropped task data:\", error);\n    }\n  };\n  const allowDrop = e => {\n    e.preventDefault();\n  };\n  const moveTask = (dragIndex, hoverIndex) => {\n    // Create a copy of the tasks array to avoid mutating state directly\n    const updatedTasks = [...tasks];\n    // Remove the task from its original position\n    const [draggedTask] = updatedTasks.splice(dragIndex, 1);\n\n    // Determine if the drag is happening to the left or right\n    const isDraggingLeft = dragIndex > hoverIndex;\n\n    // Insert the task into its new position\n    updatedTasks.splice(isDraggingLeft ? hoverIndex : hoverIndex + 1, 0, draggedTask);\n\n    // Update the tasks array in state\n    setTasks(updatedTasks);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onDrop: handleDrop,\n    onDragOver: allowDrop,\n    children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Task, {\n      index: index,\n      task: task,\n      moveTask: moveTask // Pass moveTask as a prop to Task component\n      ,\n      isAdmin: user.role === 'admin'\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"XeI+cjhc9Jdm/ZzRXAUQKX3Vmg4=\", false, function () {\n  return [useAuth];\n});\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useContext","Task","TaskContext","useAuth","jsxDEV","_jsxDEV","TaskList","onDrop","_s","tasks","setTasks","user","handleDrop","e","preventDefault","droppedTaskData","dataTransfer","getData","console","error","droppedTask","JSON","parse","allowDrop","moveTask","dragIndex","hoverIndex","updatedTasks","draggedTask","splice","isDraggingLeft","onDragOver","children","map","task","index","isAdmin","role","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/francis/EventPlanner/client/src/Components/TaskList.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport Task from './Task';\nimport TaskContext from './TaskContext';\nimport { useAuth } from './AuthContext';\n\nfunction TaskList({ onDrop }) {\n  const { tasks, setTasks } = useContext(TaskContext);\n  const { user } = useAuth();\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    \n    try {\n      const droppedTaskData = e.dataTransfer.getData('task');\n      if (!droppedTaskData) {\n        // Handle empty data\n        console.error(\"Error: Empty dropped task data.\");\n        return;\n      }\n  \n      const droppedTask = JSON.parse(droppedTaskData);\n      // Proceed with handling the dropped task\n      onDrop(droppedTask);\n    } catch (error) {\n      console.error(\"Error parsing dropped task data:\", error);\n    }\n  };\n  \n\n  const allowDrop = (e) => {\n    e.preventDefault();\n  };\n\n  const moveTask = (dragIndex, hoverIndex) => {\n    // Create a copy of the tasks array to avoid mutating state directly\n    const updatedTasks = [...tasks];\n    // Remove the task from its original position\n    const [draggedTask] = updatedTasks.splice(dragIndex, 1);\n    \n    // Determine if the drag is happening to the left or right\n    const isDraggingLeft = dragIndex > hoverIndex;\n    \n    // Insert the task into its new position\n    updatedTasks.splice(isDraggingLeft ? hoverIndex : hoverIndex + 1, 0, draggedTask);\n    \n    // Update the tasks array in state\n    setTasks(updatedTasks);\n  };\n  \n\n  return (\n    <div onDrop={handleDrop} onDragOver={allowDrop}>\n      {tasks.map((task, index) => (\n        <Task\n          key={task.id}\n          index={index}\n          task={task}\n          moveTask={moveTask} // Pass moveTask as a prop to Task component\n          isAdmin={user.role === 'admin'}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default TaskList;\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,QAAQA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAC5B,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGV,UAAU,CAACE,WAAW,CAAC;EACnD,MAAM;IAAES;EAAK,CAAC,GAAGR,OAAO,CAAC,CAAC;EAE1B,MAAMS,UAAU,GAAIC,CAAC,IAAK;IACxBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACF,MAAMC,eAAe,GAAGF,CAAC,CAACG,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MACtD,IAAI,CAACF,eAAe,EAAE;QACpB;QACAG,OAAO,CAACC,KAAK,CAAC,iCAAiC,CAAC;QAChD;MACF;MAEA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACP,eAAe,CAAC;MAC/C;MACAR,MAAM,CAACa,WAAW,CAAC;IACrB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IAC1D;EACF,CAAC;EAGD,MAAMI,SAAS,GAAIV,CAAC,IAAK;IACvBA,CAAC,CAACC,cAAc,CAAC,CAAC;EACpB,CAAC;EAED,MAAMU,QAAQ,GAAGA,CAACC,SAAS,EAAEC,UAAU,KAAK;IAC1C;IACA,MAAMC,YAAY,GAAG,CAAC,GAAGlB,KAAK,CAAC;IAC/B;IACA,MAAM,CAACmB,WAAW,CAAC,GAAGD,YAAY,CAACE,MAAM,CAACJ,SAAS,EAAE,CAAC,CAAC;;IAEvD;IACA,MAAMK,cAAc,GAAGL,SAAS,GAAGC,UAAU;;IAE7C;IACAC,YAAY,CAACE,MAAM,CAACC,cAAc,GAAGJ,UAAU,GAAGA,UAAU,GAAG,CAAC,EAAE,CAAC,EAAEE,WAAW,CAAC;;IAEjF;IACAlB,QAAQ,CAACiB,YAAY,CAAC;EACxB,CAAC;EAGD,oBACEtB,OAAA;IAAKE,MAAM,EAAEK,UAAW;IAACmB,UAAU,EAAER,SAAU;IAAAS,QAAA,EAC5CvB,KAAK,CAACwB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrB9B,OAAA,CAACJ,IAAI;MAEHkC,KAAK,EAAEA,KAAM;MACbD,IAAI,EAAEA,IAAK;MACXV,QAAQ,EAAEA,QAAS,CAAC;MAAA;MACpBY,OAAO,EAAEzB,IAAI,CAAC0B,IAAI,KAAK;IAAQ,GAJ1BH,IAAI,CAACI,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKb,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAClC,EAAA,CA1DQF,QAAQ;EAAA,QAEEH,OAAO;AAAA;AAAAwC,EAAA,GAFjBrC,QAAQ;AA4DjB,eAAeA,QAAQ;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}