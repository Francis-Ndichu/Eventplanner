{"ast":null,"code":"var _jsxFileName = \"/home/francis/EventPlanner/client/src/Components/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport EventCard from './EventCard';\nimport TaskList from './TaskList';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [columns, setColumns] = useState({\n    todo: {\n      id: 'todo',\n      // Use fixed IDs for Droppable components\n      title: 'ToDo',\n      items: [{\n        id: 'task1',\n        title: 'Task 1'\n      }]\n    },\n    inProgress: {\n      id: 'inProgress',\n      title: 'InProgress',\n      items: []\n    },\n    completed: {\n      id: 'completed',\n      title: 'Completed',\n      items: []\n    },\n    delayed: {\n      id: 'delayed',\n      title: 'Delayed',\n      items: []\n    }\n  });\n  useEffect(() => {\n    // Generate unique IDs using uuid only once during component initialization\n    const newColumns = {};\n    Object.keys(columns).forEach(key => {\n      newColumns[key] = {\n        ...columns[key],\n        id: uuidv4()\n      };\n    });\n    setColumns(newColumns);\n  }, []); // Empty dependency array ensures this effect runs only once\n\n  const onDragEnd = result => {\n    const {\n      source,\n      destination,\n      draggableId\n    } = result;\n    if (!destination) return;\n\n    // Ensure source and destination droppableIds exist in columns state\n    if (!columns[source.droppableId] || !columns[destination.droppableId]) return;\n    const newColumns = {\n      ...columns\n    };\n    const sourceColumn = newColumns[source.droppableId];\n    const destinationColumn = newColumns[destination.droppableId];\n    const newSourceItems = Array.from(sourceColumn.items);\n    const newDestinationItems = Array.from(destinationColumn.items);\n    if (source.droppableId === destination.droppableId) {\n      newSourceItems.splice(source.index, 1);\n      newSourceItems.splice(destination.index, 0, draggableId);\n      newColumns[source.droppableId] = {\n        ...sourceColumn,\n        items: newSourceItems\n      };\n    } else {\n      newSourceItems.splice(source.index, 1);\n      newDestinationItems.splice(destination.index, 0, draggableId);\n      newColumns[source.droppableId] = {\n        ...sourceColumn,\n        items: newSourceItems\n      };\n      newColumns[destination.droppableId] = {\n        ...destinationColumn,\n        items: newDestinationItems\n      };\n    }\n    setColumns(newColumns);\n  };\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"aside\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Upcoming Events\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(EventCard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"main\", {\n          className: \"main-content\",\n          style: {\n            height: \"fit-content\",\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Main Content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"This is the main content area of the dashboard.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex'\n          },\n          children: Object.values(columns).map(column => /*#__PURE__*/_jsxDEV(Droppable, {\n            droppableId: column.id,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              ref: provided.innerRef,\n              ...provided.droppableProps,\n              style: {\n                backgroundColor: 'lightgrey',\n                flex: '1',\n                margin: '8px',\n                minHeight: '200px'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"column\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"column-section\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: column.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 105,\n                    columnNumber: 25\n                  }, this), column.items.map((item, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n                    draggableId: item.id,\n                    index: index,\n                    children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n                      ref: provided.innerRef,\n                      ...provided.draggableProps,\n                      ...provided.dragHandleProps,\n                      children: /*#__PURE__*/_jsxDEV(TaskList, {\n                        task: item,\n                        droppableId: column.id\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 115,\n                        columnNumber: 33\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 110,\n                      columnNumber: 31\n                    }, this)\n                  }, item.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 108,\n                    columnNumber: 27\n                  }, this)), provided.placeholder]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 104,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this)\n          }, column.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"mvbPbgOXqdYlHgqL/DgH6hkhQjo=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","DragDropContext","Droppable","Draggable","EventCard","TaskList","v4","uuidv4","jsxDEV","_jsxDEV","Dashboard","_s","columns","setColumns","todo","id","title","items","inProgress","completed","delayed","newColumns","Object","keys","forEach","key","onDragEnd","result","source","destination","draggableId","droppableId","sourceColumn","destinationColumn","newSourceItems","Array","from","newDestinationItems","splice","index","children","className","fileName","_jsxFileName","lineNumber","columnNumber","style","height","width","display","values","map","column","provided","ref","innerRef","droppableProps","backgroundColor","flex","margin","minHeight","item","draggableProps","dragHandleProps","task","placeholder","_c","$RefreshReg$"],"sources":["/home/francis/EventPlanner/client/src/Components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport EventCard from './EventCard';\nimport TaskList from './TaskList';\nimport { v4 as uuidv4 } from 'uuid'; // Import uuid\n\nconst Dashboard = () => {\n  const [columns, setColumns] = useState({\n    todo: {\n      id: 'todo', // Use fixed IDs for Droppable components\n      title: 'ToDo',\n      items: [{ id: 'task1', title: 'Task 1' }]\n    },\n    inProgress: {\n      id: 'inProgress',\n      title: 'InProgress',\n      items: []\n    },\n    completed: {\n      id: 'completed',\n      title: 'Completed',\n      items: []\n    },\n    delayed: {\n      id: 'delayed',\n      title: 'Delayed',\n      items: []\n    }\n  });\n\n  useEffect(() => {\n    // Generate unique IDs using uuid only once during component initialization\n    const newColumns = {};\n    Object.keys(columns).forEach(key => {\n      newColumns[key] = { ...columns[key], id: uuidv4() };\n    });\n    setColumns(newColumns);\n  }, []); // Empty dependency array ensures this effect runs only once\n\n  const onDragEnd = result => {\n    const { source, destination, draggableId } = result;\n    if (!destination) return;\n  \n    // Ensure source and destination droppableIds exist in columns state\n    if (!columns[source.droppableId] || !columns[destination.droppableId]) return;\n  \n    const newColumns = { ...columns };\n  \n    const sourceColumn = newColumns[source.droppableId];\n    const destinationColumn = newColumns[destination.droppableId];\n    const newSourceItems = Array.from(sourceColumn.items);\n    const newDestinationItems = Array.from(destinationColumn.items);\n  \n    if (source.droppableId === destination.droppableId) {\n      newSourceItems.splice(source.index, 1);\n      newSourceItems.splice(destination.index, 0, draggableId);\n      newColumns[source.droppableId] = {\n        ...sourceColumn,\n        items: newSourceItems,\n      };\n    } else {\n      newSourceItems.splice(source.index, 1);\n      newDestinationItems.splice(destination.index, 0, draggableId);\n      newColumns[source.droppableId] = {\n        ...sourceColumn,\n        items: newSourceItems,\n      };\n      newColumns[destination.droppableId] = {\n        ...destinationColumn,\n        items: newDestinationItems,\n      };\n    }\n  \n    setColumns(newColumns);\n  };\n  \n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div className=\"dashboard\">\n        <aside className=\"sidebar\">\n          <h2>Upcoming Events</h2>\n          <EventCard />\n        </aside>\n        <div className=\"main-section\">\n          <main className=\"main-content\" style={{ height: \"fit-content\", width: \"100%\" }}>\n            <h1>Main Content</h1>\n            <p>This is the main content area of the dashboard.</p>\n          </main>\n          <div style={{ display: 'flex' }}>\n            {Object.values(columns).map(column => (\n              <Droppable droppableId={column.id} key={column.id}>\n                {(provided) => (\n                  <div\n                    ref={provided.innerRef}\n                    {...provided.droppableProps}\n                    style={{\n                      backgroundColor: 'lightgrey',\n                      flex: '1',\n                      margin: '8px',\n                      minHeight: '200px'\n                    }}\n                  >\n                    <div className=\"column\">\n                      <div className=\"column-section\">\n                        <h2>{column.title}</h2>\n                        {/* Render tasks without updating state here */}\n                        {column.items.map((item, index) => (\n                          <Draggable key={item.id} draggableId={item.id} index={index}>\n                            {(provided) => (\n                              <div\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                              >\n                                <TaskList task={item} droppableId={column.id} />\n                              </div>\n                            )}\n                          </Draggable>\n                        ))}\n                        {provided.placeholder}\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </Droppable>\n            ))}\n          </div>\n        </div>\n      </div>\n    </DragDropContext>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}