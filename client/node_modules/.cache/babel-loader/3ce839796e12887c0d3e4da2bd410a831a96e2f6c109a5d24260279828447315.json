{"ast":null,"code":"var _jsxFileName = \"/home/francis/EventPlanner/client/src/Components/TaskContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskContext = /*#__PURE__*/createContext();\nexport const TaskProvider = ({\n  children\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [sourceSection, setSourceSection] = useState(null);\n  const [columnIds, setColumnIds] = useState([]);\n  const [droppableId, setDroppableId] = useState(null);\n  const updateDroppableId = id => {\n    setDroppableId(id);\n  };\n  useEffect(() => {\n    // Notify subscribers whenever droppableId changes\n    console.log(\"Droppable ID updated:\", droppableId);\n  }, [droppableId]);\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const response = await fetch('http://localhost:5555/api/tasks');\n        if (!response.ok) {\n          throw new Error('Failed to fetch tasks');\n        }\n        const data = await response.json();\n        setTasks(data);\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n      }\n    };\n    fetchTasks();\n\n    // Cleanup function is not needed in this case\n  }, []); // Empty dependency array ensures the effect runs only once when the component mounts\n\n  const updateTaskList = async newTasks => {\n    try {\n      // Update the backend or local storage with the new task list\n      const response = await fetch('http://localhost:5555/api/tasks', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTasks)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task list');\n      }\n      // Update the tasks state with the new task list\n      setTasks(newTasks);\n    } catch (error) {\n      console.error('Error updating task list:', error);\n    }\n  };\n  const onDrop = (index, task, event) => {\n    if (event) {\n      event.preventDefault();\n      if (event.dataTransfer) {\n        event.dataTransfer.dropEffect = 'move';\n      }\n    }\n\n    // Implement the logic for handling dropped tasks here\n    console.log('Dropped task:', task);\n    console.log('Drop index:', index);\n\n    // Perform the necessary state update to reorder the tasks\n    const updatedTasks = [...tasks];\n    updatedTasks.splice(index, 0, updatedTasks.splice(tasks.indexOf(task), 1)[0]);\n    updateTaskList(updatedTasks);\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      setTasks,\n      sourceSection,\n      setSourceSection,\n      updateTaskList,\n      onDrop,\n      droppableId,\n      updateDroppableId,\n      columnIds,\n      setColumnIds\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskProvider, \"Sqvked1ukB9z/PYZtx4aOVwoJJE=\");\n_c = TaskProvider;\nexport default TaskContext;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","TaskContext","TaskProvider","children","_s","tasks","setTasks","sourceSection","setSourceSection","columnIds","setColumnIds","droppableId","setDroppableId","updateDroppableId","id","console","log","fetchTasks","response","fetch","ok","Error","data","json","error","updateTaskList","newTasks","method","headers","body","JSON","stringify","onDrop","index","task","event","preventDefault","dataTransfer","dropEffect","updatedTasks","splice","indexOf","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/francis/EventPlanner/client/src/Components/TaskContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nconst TaskContext = createContext();\n\nexport const TaskProvider = ({ children }) => {\n  const [tasks, setTasks] = useState([]);\n  const [sourceSection, setSourceSection] = useState(null);\n  const [columnIds, setColumnIds] = useState([]);\n\n  const [droppableId, setDroppableId] = useState(null);\n\n  const updateDroppableId = (id) => {\n    setDroppableId(id);\n  };\n\n  useEffect(() => {\n    // Notify subscribers whenever droppableId changes\n    console.log(\"Droppable ID updated:\", droppableId);\n  }, [droppableId]);\n\n\n  useEffect(() => {\n    const fetchTasks = async () => {\n      try {\n        const response = await fetch('http://localhost:5555/api/tasks');\n        if (!response.ok) {\n          throw new Error('Failed to fetch tasks');\n        }\n        const data = await response.json();\n        setTasks(data);\n      } catch (error) {\n        console.error('Error fetching tasks:', error);\n      }\n    };\n\n    fetchTasks();\n\n    // Cleanup function is not needed in this case\n  }, []); // Empty dependency array ensures the effect runs only once when the component mounts\n\n  const updateTaskList = async (newTasks) => {\n    try {\n      // Update the backend or local storage with the new task list\n      const response = await fetch('http://localhost:5555/api/tasks', {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(newTasks),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update task list');\n      }\n      // Update the tasks state with the new task list\n      setTasks(newTasks);\n    } catch (error) {\n      console.error('Error updating task list:', error);\n    }\n  };\n\n  const onDrop = (index, task, event) => {\n    if (event) {\n      event.preventDefault();\n      if (event.dataTransfer) {\n        event.dataTransfer.dropEffect = 'move';\n      }\n    }\n\n    // Implement the logic for handling dropped tasks here\n    console.log('Dropped task:', task);\n    console.log('Drop index:', index);\n\n    // Perform the necessary state update to reorder the tasks\n    const updatedTasks = [...tasks];\n    updatedTasks.splice(index, 0, updatedTasks.splice(tasks.indexOf(task), 1)[0]);\n    updateTaskList(updatedTasks);\n  };\n\n  return (\n    <TaskContext.Provider value={{ tasks, setTasks, sourceSection, setSourceSection, updateTaskList, onDrop ,droppableId, updateDroppableId , columnIds, setColumnIds }}>\n      {children}\n    </TaskContext.Provider>\n  );\n};\n\nexport default TaskContext;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}