{"ast":null,"code":"var _jsxFileName = \"/home/francis/EventPlanner/client/src/Components/TaskList.js\",\n  _s = $RefreshSig$();\n// TaskList.js\nimport React, { useContext, useEffect, useState } from 'react';\nimport Task from './Task';\nimport TaskContext from './TaskContext';\nimport { useAuth } from './AuthContext';\nimport { useDrop } from 'react-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList() {\n  _s();\n  const {\n    tasks,\n    setTasks\n  } = useContext(TaskContext);\n  const {\n    user\n  } = useAuth();\n  const [draggedTaskId, setDraggedTaskId] = useState(null);\n  useEffect(() => {\n    // Fetch tasks from the database or local storage\n    fetchTasks();\n  }, []);\n  const fetchTasks = async () => {\n    try {\n      // Retrieve tasks from local storage\n      const storedTasks = localStorage.getItem('tasks');\n\n      // If tasks are found in local storage, parse and update the tasks state in TaskContext\n      if (storedTasks) {\n        const parsedTasks = JSON.parse(storedTasks);\n\n        // Sort tasks based on their positions\n        parsedTasks.sort((a, b) => a.position - b.position);\n        setTasks(parsedTasks);\n      }\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n  const handleDrop = (draggedId, targetIndex) => {\n    const updatedTasks = [...tasks];\n    const draggedTask = updatedTasks.find(task => task.id === draggedId);\n    const draggedIndex = updatedTasks.indexOf(draggedTask);\n    const direction = draggedIndex < targetIndex ? 1 : -1;\n\n    // Update positions locally\n    updatedTasks.splice(draggedIndex, 1);\n    updatedTasks.splice(targetIndex + (direction === 1 ? -1 : 0), 0, draggedTask);\n    setTasks(updatedTasks);\n\n    // Update positions in local storage\n    try {\n      localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n    } catch (error) {\n      console.error('Error updating task positions in local storage:', error);\n    }\n  };\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: 'TASK',\n    drop: (item, monitor) => {\n      const draggedId = item.id;\n      const targetIndex = tasks.length; // Dropping at the end of the list\n      handleDrop(draggedId, targetIndex);\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    style: {\n      minHeight: '100vh',\n      background: isOver ? 'lightblue' : 'white'\n    },\n    children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(Task, {\n      index: index,\n      task: task,\n      sourceSection: task.section,\n      isAdmin: user.role === 'admin',\n      setDraggedTaskId: setDraggedTaskId,\n      draggedTaskId: draggedTaskId\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"jyscQEOHxG/UY53p8GSR7y/udcM=\", false, function () {\n  return [useAuth, useDrop];\n});\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Task","TaskContext","useAuth","useDrop","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","user","draggedTaskId","setDraggedTaskId","fetchTasks","storedTasks","localStorage","getItem","parsedTasks","JSON","parse","sort","a","b","position","error","console","handleDrop","draggedId","targetIndex","updatedTasks","draggedTask","find","task","id","draggedIndex","indexOf","direction","splice","setItem","stringify","isOver","drop","accept","item","monitor","length","collect","ref","style","minHeight","background","children","map","index","sourceSection","section","isAdmin","role","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/francis/EventPlanner/client/src/Components/TaskList.js"],"sourcesContent":["// TaskList.js\nimport React, { useContext, useEffect, useState } from 'react';\nimport Task from './Task';\nimport TaskContext from './TaskContext';\nimport { useAuth } from './AuthContext';\nimport { useDrop } from 'react-dnd';\n\nfunction TaskList() {\n  const { tasks, setTasks } = useContext(TaskContext);\n  const { user } = useAuth();\n  const [draggedTaskId, setDraggedTaskId] = useState(null);\n\n  useEffect(() => {\n    // Fetch tasks from the database or local storage\n    fetchTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    try {\n      // Retrieve tasks from local storage\n      const storedTasks = localStorage.getItem('tasks');\n\n      // If tasks are found in local storage, parse and update the tasks state in TaskContext\n      if (storedTasks) {\n        const parsedTasks = JSON.parse(storedTasks);\n\n        // Sort tasks based on their positions\n        parsedTasks.sort((a, b) => a.position - b.position);\n\n        setTasks(parsedTasks);\n      }\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  const handleDrop = (draggedId, targetIndex) => {\n    const updatedTasks = [...tasks];\n    const draggedTask = updatedTasks.find(task => task.id === draggedId);\n    const draggedIndex = updatedTasks.indexOf(draggedTask);\n    const direction = draggedIndex < targetIndex ? 1 : -1;\n\n    // Update positions locally\n    updatedTasks.splice(draggedIndex, 1);\n    updatedTasks.splice(targetIndex + (direction === 1 ? -1 : 0), 0, draggedTask);\n    setTasks(updatedTasks);\n\n    // Update positions in local storage\n    try {\n      localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n    } catch (error) {\n      console.error('Error updating task positions in local storage:', error);\n    }\n  };\n\n  const [{ isOver }, drop] = useDrop({\n    accept: 'TASK',\n    drop: (item, monitor) => {\n      const draggedId = item.id;\n      const targetIndex = tasks.length; // Dropping at the end of the list\n      handleDrop(draggedId, targetIndex);\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver(),\n    }),\n  });\n\n  return (\n    <div ref={drop} style={{ minHeight: '100vh', background: isOver ? 'lightblue' : 'white' }}>\n      {tasks.map((task, index) => (\n        <Task\n          key={task.id}\n          index={index}\n          task={task}\n          sourceSection={task.section}\n          isAdmin={user.role === 'admin'}\n          setDraggedTaskId={setDraggedTaskId}\n          draggedTaskId={draggedTaskId}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default TaskList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}