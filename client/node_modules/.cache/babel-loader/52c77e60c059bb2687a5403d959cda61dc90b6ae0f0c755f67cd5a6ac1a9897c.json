{"ast":null,"code":"var _jsxFileName = \"/home/francis/EventPlanner/client/src/Components/TaskList.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport Task from './Task';\nimport TaskContext from './TaskContext';\nimport { useAuth } from './AuthContext';\nimport { useDrop } from 'react-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TaskList() {\n  _s();\n  const {\n    tasks,\n    setTasks\n  } = useContext(TaskContext);\n  const {\n    user\n  } = useAuth();\n  const [draggedTaskId, setDraggedTaskId] = useState(null);\n  const userTasks = tasks.filter(task => task.assigned_users.some(assignedUser => assignedUser.id === user.id));\n  useEffect(() => {\n    const storedTasks = localStorage.getItem('tasks');\n    if (storedTasks) {\n      setTasks(JSON.parse(storedTasks));\n    }\n  }, [setTasks]);\n  const handleDrop = (draggedId, targetIndex) => {\n    const updatedTasks = [...userTasks];\n    const draggedTask = updatedTasks.find(task => task.id === draggedId);\n    const draggedIndex = updatedTasks.indexOf(draggedTask);\n    const direction = draggedIndex < targetIndex ? 1 : -1;\n    updatedTasks.splice(draggedIndex, 1);\n    updatedTasks.splice(targetIndex + (direction === 1 ? -1 : 0), 0, draggedTask);\n    setTasks(updatedTasks);\n\n    // Update positions in localStorage\n    localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n  };\n  const [{\n    isOver\n  }, drop] = useDrop({\n    accept: 'TASK',\n    drop: (item, monitor) => {\n      const draggedId = item.id;\n      const targetIndex = userTasks.length; // Dropping at the end of the list\n      handleDrop(draggedId, targetIndex);\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    style: {\n      minHeight: '100vh',\n      background: isOver ? 'lightblue' : 'white'\n    },\n    children: userTasks.map((task, index) => /*#__PURE__*/_jsxDEV(Task, {\n      index: index,\n      task: task,\n      sourceSection: task.section,\n      isAdmin: user.role === 'admin',\n      setDraggedTaskId: setDraggedTaskId,\n      handleDrop: handleDrop,\n      draggedTaskId: draggedTaskId\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskList, \"jyscQEOHxG/UY53p8GSR7y/udcM=\", false, function () {\n  return [useAuth, useDrop];\n});\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useContext","useEffect","useState","Task","TaskContext","useAuth","useDrop","jsxDEV","_jsxDEV","TaskList","_s","tasks","setTasks","user","draggedTaskId","setDraggedTaskId","userTasks","filter","task","assigned_users","some","assignedUser","id","storedTasks","localStorage","getItem","JSON","parse","handleDrop","draggedId","targetIndex","updatedTasks","draggedTask","find","draggedIndex","indexOf","direction","splice","setItem","stringify","isOver","drop","accept","item","monitor","length","collect","ref","style","minHeight","background","children","map","index","sourceSection","section","isAdmin","role","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/francis/EventPlanner/client/src/Components/TaskList.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport Task from './Task';\nimport TaskContext from './TaskContext';\nimport { useAuth } from './AuthContext';\nimport { useDrop } from 'react-dnd';\n\nfunction TaskList() {\n  const { tasks, setTasks } = useContext(TaskContext);\n  const { user } = useAuth();\n  const [draggedTaskId, setDraggedTaskId] = useState(null);\n\n  const userTasks = tasks.filter(task => task.assigned_users.some(assignedUser => assignedUser.id === user.id));\n\n  useEffect(() => {\n    const storedTasks = localStorage.getItem('tasks');\n    if (storedTasks) {\n      setTasks(JSON.parse(storedTasks));\n    }\n  }, [setTasks]);\n\n  const handleDrop = (draggedId, targetIndex) => {\n    const updatedTasks = [...userTasks];\n    const draggedTask = updatedTasks.find(task => task.id === draggedId);\n    const draggedIndex = updatedTasks.indexOf(draggedTask);\n    const direction = draggedIndex < targetIndex ? 1 : -1;\n\n    updatedTasks.splice(draggedIndex, 1);\n    updatedTasks.splice(targetIndex + (direction === 1 ? -1 : 0), 0, draggedTask);\n    setTasks(updatedTasks);\n\n    // Update positions in localStorage\n    localStorage.setItem('tasks', JSON.stringify(updatedTasks));\n  };\n\n  const [{ isOver }, drop] = useDrop({\n    accept: 'TASK',\n    drop: (item, monitor) => {\n      const draggedId = item.id;\n      const targetIndex = userTasks.length; // Dropping at the end of the list\n      handleDrop(draggedId, targetIndex);\n    },\n    collect: monitor => ({\n      isOver: !!monitor.isOver(),\n    }),\n  });\n\n  return (\n    <div ref={drop} style={{ minHeight: '100vh', background: isOver ? 'lightblue' : 'white' }}>\n      {userTasks.map((task, index) => (\n        <Task\n          key={task.id}\n          index={index}\n          task={task}\n          sourceSection={task.section}\n          isAdmin={user.role === 'admin'}\n          setDraggedTaskId={setDraggedTaskId}\n          handleDrop={handleDrop}\n          draggedTaskId={draggedTaskId}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default TaskList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}