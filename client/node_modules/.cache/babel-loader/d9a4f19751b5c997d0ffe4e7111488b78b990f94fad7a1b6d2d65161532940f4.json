{"ast":null,"code":"var _jsxFileName = \"/home/francis/EventPlanner/client/src/Components/TaskContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskContext = /*#__PURE__*/createContext();\nexport const TaskProvider = ({\n  children\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    // Fetch tasks from API\n  }, []);\n  const updateTask = async (taskId, updatedData) => {\n    try {\n      // Update task in backend\n      // Then update state\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n  const deleteTask = async taskId => {\n    try {\n      // Delete task in backend\n      // Then update state\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: {\n      tasks,\n      updateTask,\n      deleteTask\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskProvider, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TaskProvider;\nexport default TaskContext;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","TaskContext","TaskProvider","children","_s","tasks","setTasks","updateTask","taskId","updatedData","error","console","deleteTask","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/francis/EventPlanner/client/src/Components/TaskContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nconst TaskContext = createContext();\n\nexport const TaskProvider = ({ children }) => {\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    // Fetch tasks from API\n  }, []);\n\n  const updateTask = async (taskId, updatedData) => {\n    try {\n      // Update task in backend\n      // Then update state\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n  const deleteTask = async (taskId) => {\n    try {\n      // Delete task in backend\n      // Then update state\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n\n  return (\n    <TaskContext.Provider value={{ tasks, updateTask, deleteTask }}>\n      {children}\n    </TaskContext.Provider>\n  );\n};\n\nexport default TaskContext;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;EAAA,CACD,EAAE,EAAE,CAAC;EAEN,MAAMS,UAAU,GAAG,MAAAA,CAAOC,MAAM,EAAEC,WAAW,KAAK;IAChD,IAAI;MACF;MACA;IAAA,CACD,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAME,UAAU,GAAG,MAAOJ,MAAM,IAAK;IACnC,IAAI;MACF;MACA;IAAA,CACD,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,oBACEV,OAAA,CAACC,WAAW,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAET,KAAK;MAAEE,UAAU;MAAEK;IAAW,CAAE;IAAAT,QAAA,EAC5DA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACd,EAAA,CA9BWF,YAAY;AAAAiB,EAAA,GAAZjB,YAAY;AAgCzB,eAAeD,WAAW;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}